{
  "hash": "dc495231bb29feff4d813d7aed1ff774",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 2: Network topology, statistics, and clustering\"\ndate: 2025-09-11\ndescription: \"\"\ncategories: [Network topology, Clustering, Advanced Visualization]\nimage: images/week2.png\nformat:\n  html: default\neditor: visual\n---\n\nToday we will get a bit more advanced with our use of igraph!\n\nIn this exercise we will use a subset of the human interaction dataset by Rual et al. (Nature.2005 Oct 20;437(7062):1173-8). The data consists of an interaction data frame (without edge annotations) and a node annotation data frame with gene names.\n\n## Part I. Getting started\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(igraph); library(ggraph); library(tidygraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'igraph'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:base':\n\n    union\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'tidygraph'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:igraph':\n\n    groups\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"./data/exercise2.Rdata\")\n```\n:::\n\n\nThis network consists of 1089 interactions observed between 419 human proteins, and is a small subset of a larger human interaction dataset. This subset consists of proteins that interact with the **transcription factor TP53** (also known as **P53**).\n\nTake a moment to read about the function of TP53 by looking it up in UniProt:\n\n-   <http://www.uniprot.org/uniprot/P53_HUMAN>\n\nIn short, the human **TP53** gene encodes **cellular tumor antigen p53**, a crucial transcription factor that acts as a central **tumor suppressor** and guardian of genomic integrity. In response to various cellular stresses such as DNA damage, oncogene activation, hypoxia, or oxidative stress, p53 becomes stabilized and activated through post-translational modifications that prevent its normal rapid degradation. Once active, it binds specific DNA response elements to regulate a large network of target genes involved in **cell cycle arrest (e.g. via p21/CDKN1A), DNA repair (e.g. GADD45), senescence, and apoptosis (e.g. BAX, PUMA, NOXA)**. This coordinated response allows cells either to pause and repair their DNA or, if damage is irreparable, to undergo programmed cell death, thus preventing the propagation of potentially oncogenic mutations. Because of this role, p53 is often called the **“guardian of the genome.”** Inactivation or mutation of TP53—commonly seen in over half of human cancers—disrupts these protective pathways, enabling unchecked cell proliferation and genomic instability, which significantly contributes to tumorigenesis.\n\n## Part II. Network layout and Selecting nodes\n\n**TASK: Explore network layouts**\n\nSo, now here I show two different layouts for the same network. The first is fr (Fruchterman–Reingold layout), and the second is kk (Kamada–Kawai layout) – ggraph(n, layout = \"fr\") and ggraph(n, layout = \"kk\"). Both are quit messy – hairballs. Really difficult to see anything meaningful without analysis. But either way, with kk we can sort of see some hubs in the center, but it does look a bit more messy, while with fr, the plot looks more spaced out, with slightly more comprehensible peripheral nodes. In this case, I prefer fr.\n\nHere is a little information from ChatGPT about both layouts:\n\n**Name:** Kamada–Kawai algorithm (kk)\n\n**How it works:**\n\n-   Treats the graph like a **spring system**.\n\n-   Each pair of nodes has an “ideal” distance based on their graph-theoretic shortest path distance.\n\n-   The algorithm minimizes the difference between ideal and actual distances.\n\n**Effect:**\n\n-   Produces fairly **symmetrical** and **uniformly spaced** graphs.\n\n-   Works especially well for **smaller networks** (tens–hundreds of nodes).\n\n**Name:** Fruchterman–Reingold algorithm (fr)\n\n**How it works:**\n\n-   Also uses a **force-directed model**:\n\n    -   connected nodes **attract** each other\n\n    -   all nodes **repel** each other like charged particles\n\n-   The system iteratively simulates forces until it reaches equilibrium.\n\n**Effect:**\n\n-   Tends to produce **clustered, organic “clouds”**.\n\n-   Works well for **larger networks** (hundreds–thousands of nodes).\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- data.frame(interactions)\np_attr <- data.frame (node_attributes)\n\nn <- graph_from_data_frame(p, directed = FALSE, vertices = p_attr)\n\nggraph(n, layout = \"fr\") + geom_edge_link(alpha = 0.3) +\n  geom_node_point(color = \"steelblue\") +\n  geom_node_text(aes(label = Gene_Id), repel = TRUE, max.overlaps = 1000, size = 2) + theme_void()\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(n, layout = \"kk\") + geom_edge_link(alpha = 0.3) +\n  geom_node_point(color = \"steelblue\") +\n  geom_node_text(aes(label = Gene_Id), repel = TRUE, max.overlaps = 1000, size = 2) + theme_void()\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n**TASK: Explore TP53 in the network**\n\nNow I will try to use the igraph function *neighbors()* to get a list of first-order interaction partners of TP53\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# neighbors() in igraph looks up vertices by the special attribute name. We have Gene_ID, not name. So here we assign all Gene_Ids to the atrribute name instead.\nV(n)$name <- V(n)$Gene_Id\ntp <- V(n)[name == \"TP53\"] #V (n) gives us the set of nodes of n, name == \"TP53\" is a filter on a vertex attribute called name. V(n)[ … ] subsets the vertices using that filter. Result: tp is a vertex sequence (an igraph object, just a selection of vertices that stays tied to a specific graph) containing the single vertex whose name is \"TP53\".\ntp # just to check\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 1/419 vertex, named, from 16930f4:\n[1] TP53\n```\n\n\n:::\n\n```{.r .cell-code}\ntp_neighbors <- neighbors(n, tp, mode = \"all\") # vertex sequence of neighbors\n\n# What it does:\n# neighbors() returns a vertex sequence of nodes directly connected to TP53.\n# mode = \"all\" is fine for undirected graphs (or use \"in\"/\"out\" for directed).\n\nlength(tp_neighbors) # number of first-order connections\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 65\n```\n\n\n:::\n\n```{.r .cell-code}\nstopifnot(length(tp_neighbors) == degree(n, v = tp, mode = \"all\")) # This is a line that ChatGPT wrote when I was asking for help. It is useful to think about it a litle. It simply stops R and tells it to throw an error if the length of tp_neighbors that we got, which is the number of first-order connecitons, does not equal the degree of the node tp (degree being the number of incident edges of tp, being the same as the number of neighbors in simple undirected graphs with no self-loops, etc), which is outputted by degree(n, v = tp, mode = \"all\").\n\n# TRUE only for TP53\nV(n)$is_tp53 <- V(n)$name == \"TP53\"\n\n# \"no\" for everyone, then \"yes\" for neighbors of TP53\nV(n)$interacts_tp53 <- rep(\"no\", vcount(n))\n\n#V(n)$interacts_tp53 <- …\n#V(n) = the vertex sequence (all nodes) of graph n.\n\n#$interacts_tp53 creates/overwrites a vertex attribute called interacts_tp53.\n\n#A vertex attribute is just a vector with one value per node (length must equal vcount(n)), stored on the graph.\n\n#rep(\"no\", vcount(n)) -- vcount(n) returns the number of vertices (nodes) in graph n (419 in this case). rep(\"no\", 419) builds a character vector c(\"no\",\"no\",…,\"no\") of length 419.\n\n#So we are explicitly creating a value for every node: everyone starts as \"no\" (i.e., “does not interact with TP53”).\n\n#This is clearer/safer than assigning a single \"no\" and relying on R’s recycling; it guarantees exact length matching to vcount(n).\n\n#After this line, every node has interacts_tp53 == \"no\".\n\n#Then you flip the subset of TP53’s neighbors to \"yes\":\n\nV(n)[tp_neighbors]$interacts_tp53<- \"yes\"\n\n# quick check\nsum(V(n)$is_tp53)              # expect 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(V(n)$interacts_tp53)     # \"yes\" count should match length(tp_neighbors)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n no yes \n355  64 \n```\n\n\n:::\n\n```{.r .cell-code}\nall(V(n)[tp_neighbors]$interacts_tp53 == \"yes\")   # should be TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nSo we have 65 first-order interactions with TP53 in this network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(n, layout = \"fr\") +\n  geom_edge_link(alpha = 0.08) +\n  geom_node_point(aes(color = interacts_tp53, shape = is_tp53), size = 2.5) +\n  scale_color_manual(values = c(no = \"grey70\", yes = \"tomato\")) +\n  scale_shape_manual(values = c(`FALSE` = 16, `TRUE` = 15)) +\n  geom_node_text(aes(label = ifelse(is_tp53 | interacts_tp53 == \"yes\", name, \"\")),\n                 repel = TRUE, size = 2, max.overlaps = 1000) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow, I will create a subnetwork consisting only of TP53 and its interaction partners, and label it with the corresponding gene names.\n\nOne way to do this is to use the *delete_vertices()* function to make a new graph, keeping only the nodes interacting with TP53. Another way to do it is by using *induced_subgraph()* and only keeping the nodes that are neighbours to TP53.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_vs <- c(tp, tp_neighbors) # Concatenates all the neighbors and tp into a single vertex sequence. These are the ones we are keeping.\n\ntp53_ego <- induced_subgraph(n, vids = keep_vs) #the induced_subgraph function takes n, and builds a new graph with only the vertices I decide to keep. These are denoted by the argument vids (stands for vertex identifiers). the object is called ego, because an ego-network (or ego-centric network) is the local subgraph centered on a focal actor (the ego) and their direct connections (alters).\n\n\nggraph(tp53_ego, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) + \n  geom_node_point(aes(color = ifelse(name == \"TP53\", \"TP53\", \"Partner\")), size = 3) +\n  scale_color_manual(values = c(TP53 = \"tomato\", Partner = \"steelblue\")) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) # label by 'name' (gene symbol) +\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_void()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ rect                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.x                    : NULL\n $ axis.title.x.top                : NULL\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    : NULL\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              : NULL\n $ axis.text                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.text.x                     : NULL\n $ axis.text.x.top                 : NULL\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     : NULL\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               : NULL\n $ axis.text.theta                 : NULL\n $ axis.text.r                     : NULL\n $ axis.ticks                      : NULL\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : NULL\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : NULL\n $ legend.margin                   : NULL\n $ legend.spacing                  : NULL\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : NULL\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : NULL\n $ legend.box.background           : NULL\n $ legend.box.spacing              : NULL\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\nNow lets do it with delete_vertices()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_vs <- c(tp, tp_neighbors) # so this is the same across both\ndrop_vs <- V(n)[!(V(n) %in% keep_vs)] # but now there is this line, which makes it less straightforward compared to induced_subgraph(). this is basically everything in n, but not in keep_vs. \n\ntp53_ego2 <- delete_vertices(n, drop_vs)\nggraph(tp53_ego2, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) + \n  geom_node_point(aes(color = ifelse(name == \"TP53\", \"TP53\", \"Partner\")), size = 3) +\n  scale_color_manual(values = c(TP53 = \"tomato\", Partner = \"steelblue\")) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) # label by 'name' (gene symbol) +\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_void()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ rect                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.x                    : NULL\n $ axis.title.x.top                : NULL\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    : NULL\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              : NULL\n $ axis.text                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.text.x                     : NULL\n $ axis.text.x.top                 : NULL\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     : NULL\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               : NULL\n $ axis.text.theta                 : NULL\n $ axis.text.r                     : NULL\n $ axis.ticks                      : NULL\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : NULL\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : NULL\n $ legend.margin                   : NULL\n $ legend.spacing                  : NULL\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : NULL\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : NULL\n $ legend.box.background           : NULL\n $ legend.box.spacing              : NULL\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\nThere is actually another way to do that, which is perhaps more convenient than either. It uses the make_ego_graph() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntp53_ego3 <- make_ego_graph(n, order = 1, nodes = tp, mode = \"all\")[[1]] # we dont just use the function here because it outputs a list of GRAPHS, so then we use [[1]] to pull the tp-centered ego network out.\n\nggraph(tp53_ego3, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3) + \n  geom_node_point(aes(color = ifelse(name == \"TP53\", \"TP53\", \"Partner\")), size = 3) +\n  scale_color_manual(values = c(TP53 = \"tomato\", Partner = \"steelblue\")) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) # label by 'name' (gene symbol) +\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_void()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ rect                            : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.x                    : NULL\n $ axis.title.x.top                : NULL\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    : NULL\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              : NULL\n $ axis.text                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.text.x                     : NULL\n $ axis.text.x.top                 : NULL\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     : NULL\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               : NULL\n $ axis.text.theta                 : NULL\n $ axis.text.r                     : NULL\n $ axis.ticks                      : NULL\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'simpleUnit' num 0points\n  ..- attr(*, \"unit\")= int 8\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : NULL\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : NULL\n $ legend.margin                   : NULL\n $ legend.spacing                  : NULL\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : NULL\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : NULL\n $ legend.box.background           : NULL\n $ legend.box.spacing              : NULL\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n## Part III. Network statistics\n\nNow I will calculate the following statistics for the full network:\n\n-   Average node degree (average number of incident edges across the network)\n\n-   Average clustering coefficient (also known as transitivity)\n\n    **Concept:**\\\n    Clustering coefficient = tendency of neighbors of a node to also be connected (i.e. “triangles”).\n\n    -   Local clustering coefficient: how clustered around a single node.\n\n    -   Global clustering coefficient: average across all nodes (or ratio of closed triplets to all triplets).\n\n-   Network diameter\n\n    **Concept:**\\\n    The longest shortest path between any two nodes in the graph.\\\n    In other words, how far apart the most distant nodes are (measured in steps).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeg <- degree(n, mode = \"all\") # degree of every vertex\nmean(deg) # average degree\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.198091\n```\n\n\n:::\n\n```{.r .cell-code}\ntransitivity(n, type = \"average\") # mean of local clustering coefficients over all nodes.(Skip nodes with degree < 2, since clustering coefficient is undefined there.))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1609234\n```\n\n\n:::\n\n```{.r .cell-code}\ndiameter(n, directed = FALSE)  # since the graph is undirected\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nNow we will make a plot of the distribution of node degrees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeg <- degree(n)\n\nhist(deg, # the data vector (degrees for all nodes).\n     breaks = 50, # Divide the x-axis (degree values) into 50 bins. More bins → more detail; fewer bins → smoother but less detail.\n     main   = \"Node Degree Distribution\", #The title of the plot\n     xlab   = \"Degree\", #Label of the x-axis. Here it represents the degree value (number of neighbors).\n     ylab   = \"Frequency\", # Label of the y-axis. It shows how many nodes fall into each degree bin.\n     col    = \"lightblue\", #Fills the bars of the histogram with light blue color.\n     border = \"white\" #Sets the outline color of the bars to white, making the bars visually cleaner.\n     )\ntp_deg <- degree(n, v = V(n)[name == \"TP53\"])\nabline(v = tp_deg, col = \"red\", lwd = 2)  # adds vertical line at TP53's degree. lwd denotes the line width.\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nSo here we can see that the degree of TP53 is literally off the chart. That clearly means it's an important protein in this network. But that's because the whole dataset consists of proteins that interact with the transcription factor TP53 (also known as P53).\n\nNow I will calculate the node-wise clustering coefficient. This is done with the *transitivity()* function, setting the variable type = \"local\". And plot a histogram, like before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclust <- transitivity(n, type = \"local\")\n\nhist(clust,\n     breaks = 50,\n     main   = \"Local Clustering Coefficient Distribution\",\n     xlab   = \"Clustering Coefficient\",\n     ylab   = \"Frequency\",\n     col    = \"lightgreen\", border = \"white\")\ntp_clust <- clust[which(V(n)$name == \"TP53\")]\nabline(v = tp_clust, col = \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntp_clust\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      TP53 \n0.01177675 \n```\n\n\n:::\n:::\n\n\nSo, perhaps unexpectedly, we can see that TP53 has a clustering coefficient of 0.012. That means that TP53 is important, as it connects to proteins that themselves are not interconnected, influencing otherwise separate groups.\n\n## Part IV. Network clustering\n\n## Louvain clustering\n\n### Concept\n\n-   **Goal:** partition the network into subclusters (communities) such that nodes are densely connected within clusters and more sparsely connected between clusters.\n\n-   **Algorithm:** Louvain clustering maximizes **modularity** (a score of how well the network splits into modules). This makes the graph much much more easily comprehensible visually, as you will see.\n\n-   **Resolution parameter:** controls the *granularity*.\n\n    -   Low resolution → fewer, larger clusters.\n\n    -   High resolution → more, smaller clusters.\n\n    -   This is adjusted manually to see what best reveals structure.\n\n<!-- -->\n\n-   **Resolution:** too low → one or two giant clusters; too high → many tiny clusters.\n\n-   **Cluster numbers:** They are arbitrary (cluster #2 doesn’t mean “second most important”). A good idea is to inspect the size with `table(membership_vec)`.\n\n-   **Disconnected components:** Diameter and clustering coefficient are only meaningful if the cluster has at least a few nodes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Running Louvain clustering\ncl <- cluster_louvain(n, resolution = 2) #We will start with resolution of 1.\n\n# Each vertex gets a cluster membership\nmembership_vec <- membership(cl)\n# ChatGPT explanation:\n# membership(): extracts the cluster ID for each vertex from the community object cl.\n# Result: membership_vec is an integer vector of length = number of nodes in your graph.\n# Example:\n# [1] 1 1 2 2 2 3 1 3 ...\n# Each entry corresponds to one vertex (in the same order as V(n)), and the number is the cluster label.\n# So if membership_vec[10] = 2, that means vertex 10 belongs to cluster 2.\n# Cluster labels are arbitrary integers (1, 2, 3, …). They don’t imply ranking or importance, just grouping.\n\n# How many clusters?\nlength(unique(membership_vec))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(membership_vec)   # size of each cluster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmembership_vec\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \n20 26 15 20 26 23 21  6 18 23 13 26  5 22 23 13 13 25 12 27 14 21  7 \n```\n\n\n:::\n\n```{.r .cell-code}\nggraph(n, layout = \"fr\") +\n  geom_edge_link(alpha = 0.05) +\n  geom_node_point(aes(color = factor(membership_vec)), size = 2) +\n  geom_node_text(aes(label = ifelse(name == \"TP53\", name, \"\")),\n                 repel = TRUE, color = \"black\", size = 3) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nAnd finally, we can now extract a sub-network from cluster two and calculate the statistics, just like before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsub_nodes <- V(n)[membership_vec == 2]\ncluster2 <- induced_subgraph(n, vids = sub_nodes)\n# Average degree\ndeg2 <- degree(cluster2)\nmean(deg2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.846154\n```\n\n\n:::\n\n```{.r .cell-code}\nhist(deg2, # the data vector (degrees for all nodes).\n     breaks = 50, # Divide the x-axis (degree values) into 50 bins. More bins → more detail; fewer bins → smoother but less detail.\n     main   = \"Node Degree Distribution of Cluster 2\", #The title of the plot\n     xlab   = \"Degree\", #Label of the x-axis. Here it represents the degree value (number of neighbors).\n     ylab   = \"Frequency\", # Label of the y-axis. It shows how many nodes fall into each degree bin.\n     col    = \"lightblue\", #Fills the bars of the histogram with light blue color.\n     border = \"white\" #Sets the outline color of the bars to white, making the bars visually cleaner.\n     )\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Average clustering coefficient\ntransitivity(cluster2, type = \"average\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4354145\n```\n\n\n:::\n\n```{.r .cell-code}\nsub_clust <- transitivity(cluster2, type = \"local\")\n\nhist(sub_clust,\n     breaks = 50,\n     main   = \"Local Clustering Coefficient Distribution of Cluster 2\",\n     xlab   = \"Clustering Coefficient\",\n     ylab   = \"Frequency\",\n     col    = \"lightgreen\", border = \"white\")\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Diameter\ndiameter(cluster2, directed = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nggraph(cluster2, layout = \"fr\") +\n  geom_edge_link(alpha = 0.1) +\n  geom_node_point(color = \"steelblue\", size = 3) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](week2-louvian_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n:::\n\n\nThat's all!",
    "supporting": [
      "week2-louvian_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}